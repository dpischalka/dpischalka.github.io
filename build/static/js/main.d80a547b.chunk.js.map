{
  "version": 3,
  "sources": [
    "containers/content/media-links-list/media-link-item/media-link-item.tsx",
    "utils/screen-sizes.ts",
    "containers/content/media-links-list/media-links-list.tsx",
    "containers/content/conten.tsx",
    "containers/app/app.tsx",
    "serviceWorker.ts",
    "index.tsx"
  ],
  "names": [
    "MediaLinkItem",
    "SCREEN_SIZES_NAMES_LIST",
    "className",
    "title",
    "icon",
    "href",
    "iconSize",
    "Icon",
    "size",
    "LinkEl",
    "rel",
    "target",
    "SpanEl",
    "screenSizes",
    "TABLET",
    "DESKTOP",
    "WIDESCREEN",
    "FULLHD",
    "ICON_SIZES",
    "mediaLinksList",
    "faEnvelope",
    "faTwitter",
    "faGithub",
    "faLinkedinIn",
    "faMedium",
    "iconSizeChangeHandler",
    "mediaLinksState",
    "mediaLinksStateSetter",
    "SCREEN_WIDTH",
    "screenWidth",
    "detectScreenSize",
    "window",
    "innerWidth",
    "filter",
    "Boolean",
    "map",
    "mediaLinkItemProps",
    "index",
    "MediaLinksList",
    "useState",
    "mediaItems",
    "updateMediaItems",
    "mediaLinkItems",
    "useEffect",
    "addEventListener",
    "bind",
    "item",
    "key",
    "Content",
    "App",
    "isLocalhost",
    "location",
    "hostname",
    "match",
    "registerValidSW",
    "swUrl",
    "config",
    "navigator",
    "serviceWorker",
    "register",
    "then",
    "registration",
    "onupdatefound",
    "installingWorker",
    "installing",
    "onstatechange",
    "state",
    "controller",
    "console",
    "log",
    "onUpdate",
    "onSuccess",
    "catch",
    "error",
    "ReactDOM",
    "render",
    "StrictMode",
    "document",
    "getElementById",
    "URL",
    "process",
    "origin",
    "fetch",
    "headers",
    "response",
    "contentType",
    "get",
    "status",
    "indexOf",
    "ready",
    "unregister",
    "reload",
    "checkValidServiceWorker"
  ],
  "mappings": "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",
  "file": "static/js/main.d80a547b.chunk.js",
  "sourcesContent": [
    "import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport './media-link-item.scss';\nimport { MediaLinkItemProps } from \"../media-links-list\";\n\nfunction MediaLinkItem({className, title, icon, href, iconSize = '3x'}: MediaLinkItemProps) {\n  const Icon: JSX.Element = <FontAwesomeIcon className=\"contact-item-icon\" icon={icon} size={iconSize}/>;\n  const LinkEl: JSX.Element = (\n    <a className={`contact-item contact-item-link ${className}`}\n       rel=\"noopener noreferrer\"\n       target=\"_blank\"\n       href={href}\n       title={href}>\n      <span className=\"contact-item-icon\">{Icon}</span>\n      <span className=\"contact-item-title\">{title}</span>\n    </a>\n  );\n  const SpanEl: JSX.Element = (\n    <div className={`contact-item ${className}`} title={title}>\n      <span className=\"contact-item-icon\">{Icon}</span>\n      <span className=\"contact-item-title\">{title}</span>\n    </div>\n  );\n\n  return (href ? LinkEl : SpanEl);\n}\n\nexport default MediaLinkItem;\n",
    "const GAP: number = 32;\nconst TABLET: number = 769;\nconst DESKTOP: number = 960 + (2 * GAP);\nconst WIDESCREEN: number = 1152 + (2 * GAP);\nconst FULLHD: number = 1344 + (2 * GAP);\n\nexport enum SCREEN_SIZES_NAMES_LIST {\n  TABLET = 'TABLET',\n  DESKTOP = 'DESKTOP',\n  WIDESCREEN = 'WIDESCREEN',\n  FULLHD = 'FULLHD',\n}\n\nexport const screenSizes = {\n  [SCREEN_SIZES_NAMES_LIST.TABLET]: TABLET,\n  [SCREEN_SIZES_NAMES_LIST.DESKTOP]: DESKTOP,\n  [SCREEN_SIZES_NAMES_LIST.WIDESCREEN]: WIDESCREEN,\n  [SCREEN_SIZES_NAMES_LIST.FULLHD]: FULLHD,\n};\n\nexport function detectScreenSize(screenWidth: number): SCREEN_SIZES_NAMES_LIST {\n  const TABLET: number = screenSizes[SCREEN_SIZES_NAMES_LIST.TABLET];\n  const DESKTOP: number = screenSizes[SCREEN_SIZES_NAMES_LIST.DESKTOP];\n  const WIDESCREEN: number = screenSizes[SCREEN_SIZES_NAMES_LIST.WIDESCREEN];\n  const FULLHD: number = screenSizes[SCREEN_SIZES_NAMES_LIST.FULLHD];\n\n  switch (true) {\n    case screenWidth < TABLET:\n      return SCREEN_SIZES_NAMES_LIST.TABLET;\n    case screenWidth >= TABLET && screenWidth <= DESKTOP:\n      return SCREEN_SIZES_NAMES_LIST.DESKTOP;\n    case screenWidth >= DESKTOP && screenWidth <= WIDESCREEN:\n      return SCREEN_SIZES_NAMES_LIST.WIDESCREEN;\n    case screenWidth >= WIDESCREEN && screenWidth <= FULLHD:\n    case screenWidth >= FULLHD:\n      return SCREEN_SIZES_NAMES_LIST.FULLHD;\n    default:\n      return null;\n  }\n}\n",
    "import React, { useState, useEffect, Dispatch, SetStateAction } from 'react';\nimport { faGithub, faLinkedinIn, faTwitter, faMedium } from \"@fortawesome/free-brands-svg-icons\";\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\nimport { IconProp, SizeProp } from \"@fortawesome/fontawesome-svg-core\";\n\nimport './media-links-list.scss';\nimport MediaLinkItem from \"./media-link-item/media-link-item\";\nimport { detectScreenSize, SCREEN_SIZES_NAMES_LIST } from '../../../utils/screen-sizes';\nimport { StringMap } from \"../../../utils/common\";\n\nexport interface MediaLinkItemProps {\n  title: string;\n  icon: IconProp;\n  href?: string;\n  iconSize?: SizeProp;\n  className?: string;\n}\n\nconst ICON_SIZES: StringMap<SizeProp> = {\n  [SCREEN_SIZES_NAMES_LIST.TABLET]: '3x',\n  [SCREEN_SIZES_NAMES_LIST.DESKTOP]: '3x',\n  [SCREEN_SIZES_NAMES_LIST.FULLHD]: '3x',\n  [SCREEN_SIZES_NAMES_LIST.WIDESCREEN]: '3x',\n};\n\nconst mediaLinksList: MediaLinkItemProps[] = [\n  {title: 'dpischalka@gmail.com', icon: faEnvelope, className: 'mail'},\n  {title: 'dpischalka', icon: faTwitter, href: 'https://twitter.com/dpischalka', className: 'twitter'},\n  {title: 'dpischalka', icon: faGithub, href: 'https://github.com/dpischalka', className: 'github'},\n  {title: 'dpischalka', icon: faLinkedinIn, href: 'https://www.linkedin.com/in/dpischalka/', className: 'linkedIn'},\n  {title: 'dpischalka', icon: faMedium, href: 'https://medium.com/@dpischalka/', className: 'medium'},\n];\n\nfunction iconSizeChangeHandler(mediaLinksState: MediaLinkItemProps[], mediaLinksStateSetter: Dispatch<SetStateAction<MediaLinkItemProps[]>>): void {\n  const SCREEN_WIDTH = detectScreenSize(window.innerWidth) ?? null;\n\n  if (SCREEN_WIDTH) {\n    mediaLinksStateSetter(mediaLinksList\n      .filter(({icon, title}: MediaLinkItemProps): boolean => Boolean(icon && title))\n      .map((mediaLinkItemProps: MediaLinkItemProps, index: number): MediaLinkItemProps => ({\n        ...mediaLinkItemProps,\n        className: `column media-link-item-${index} ${mediaLinkItemProps.className}`,\n        iconSize: ICON_SIZES[SCREEN_WIDTH],\n      })));\n  }\n}\n\nfunction MediaLinksList() {\n  const [mediaItems, updateMediaItems] = useState<MediaLinkItemProps[]>(mediaLinksList);\n\n  const mediaLinkItems = mediaItems\n    .filter(({icon, title}: MediaLinkItemProps): boolean => Boolean(icon && title))\n    .map((mediaLinkItemProps: MediaLinkItemProps, index: number): MediaLinkItemProps => ({\n      ...mediaLinkItemProps,\n      className: `column media-link-item-${index} ${mediaLinkItemProps.className}`,\n    }));\n\n  useEffect(() => {\n    window.addEventListener('resize', iconSizeChangeHandler.bind(MediaLinksList, mediaItems, updateMediaItems));\n    window.addEventListener('load', iconSizeChangeHandler.bind(MediaLinksList, mediaItems, updateMediaItems));\n  }, [mediaItems]);\n\n  return (\n    <div className=\"media-links-container columns is-mobile is-gapless\">{mediaLinkItems.map(\n      (item: MediaLinkItemProps, index: number): JSX.Element => <MediaLinkItem key={index} {...item}/>\n    )}</div>\n  )\n}\n\nexport default MediaLinksList;\n",
    "import React from 'react';\n\nimport './content.scss';\nimport MediaLinksList from './media-links-list/media-links-list';\n\nfunction Content() {\n  const authorName: string = 'Dmitry Pischalka';\n  const description: string = 'Senior Front-End Developer, geek, blogger.';\n  const temporaryNotification: string = 'Coming soon for blog, additional info, other...';\n\n  return (\n    <main className=\"content-part container\">\n      <div className=\"is-hidden-mobile flex-centred-horizontal\">\n        <h1 className=\"is-size-1 content-part-title has-text-centered\">{authorName}</h1>\n      </div>\n\n      <div className=\"is-flex-mobile hidden flex-centred-horizontal\">\n        <h1 className=\"is-size-2 content-part-title has-text-centered\">{authorName}</h1>\n      </div>\n\n      <div className=\"content-description has-text-centered\">{description}</div>\n      <div className=\"content-temporary-notification has-text-centered\">{temporaryNotification}</div>\n      <MediaLinksList/>\n    </main>\n  );\n}\n\nexport default Content;\n",
    "import React from 'react';\n\nimport './app.scss';\nimport Content from \"../content/conten\";\n\nfunction App() {\n  return (\n    <div className=\"app-component has-text-centered container\">\n      <Content/>\n    </div>\n  );\n}\n\nexport default App;\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.scss';\nimport App from './containers/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"
  ],
  "sourceRoot": ""
}
