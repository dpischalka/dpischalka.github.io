{
  "version": 3,
  "sources": [
    "components/header/home-link/home-link.tsx",
    "components/header/nav-menu/nav-menu.tsx",
    "components/header/header/header.tsx",
    "components/content/media-links-list/media-link-item/media-link-item.tsx",
    "components/content/media-links-list/media-links-list.tsx",
    "components/content/conten.tsx",
    "components/app/app.tsx",
    "serviceWorker.ts",
    "index.tsx"
  ],
  "names": [
    "HomeLink",
    "href",
    "className",
    "NavMenu",
    "Header",
    "MediaLinkItem",
    "title",
    "icon",
    "size",
    "MediaLinksList",
    "mediaLinksList",
    "faTwitter",
    "useState",
    "mediaLinkItems",
    "filter",
    "Boolean",
    "map",
    "index",
    "key",
    "Content",
    "App",
    "isLocalhost",
    "window",
    "location",
    "hostname",
    "match",
    "registerValidSW",
    "swUrl",
    "config",
    "navigator",
    "serviceWorker",
    "register",
    "then",
    "registration",
    "onupdatefound",
    "installingWorker",
    "installing",
    "onstatechange",
    "state",
    "controller",
    "console",
    "log",
    "onUpdate",
    "onSuccess",
    "catch",
    "error",
    "ReactDOM",
    "render",
    "StrictMode",
    "document",
    "getElementById",
    "URL",
    "process",
    "origin",
    "addEventListener",
    "fetch",
    "headers",
    "response",
    "contentType",
    "get",
    "status",
    "indexOf",
    "ready",
    "unregister",
    "reload",
    "checkValidServiceWorker"
  ],
  "mappings": "sYASeA,MANf,WACE,OACE,uBAAGC,KAAK,IAAIC,UAAU,aAAtB,S,MCKWC,MANf,WACE,OACE,0BAAMD,UAAU,qBAAhB,yBCSWE,MATf,WACE,OACE,4BAAQF,UAAU,UAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,oCCMSG,MATf,YAAsE,IAA9CH,EAA6C,EAA7CA,UAAWI,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,KACxC,OACE,yBAAKL,UAAWA,GACd,kBAAC,IAAD,CAAiBK,KAAMA,EAAMC,KAAK,OAClC,8BAAOF,K,OCsBEG,MAnBf,WACE,IAAMC,EAAuC,CAC3C,CAACJ,MAAO,uBAAwBC,KAAMI,KACtC,CAACL,MAAO,aAAcC,KAAMI,MAHN,EAKHC,mBAA+BF,GAC9CG,EANkB,oBAOrBC,QAAO,gBAAEP,EAAF,EAAEA,KAAMD,EAAR,EAAQA,MAAR,OAAgDS,QAAQR,GAAQD,MACvEU,KAAI,WAA+CC,GAAmB,IAAhEV,EAA+D,EAA/DA,KAAMD,EAAyD,EAAzDA,MAAOJ,EAAkD,EAAlDA,UAGlB,OAFAA,EAAS,0BAAsBe,GAExB,kBAAC,EAAD,CAAeC,IAAKD,EAAOV,KAAMA,EAAMD,MAAOA,EAAOJ,UAAWA,OAG3E,OACE,yBAAKA,UAAU,yBAAyBW,ICV7BM,MAdf,WAIE,OACE,0BAAMjB,UAAU,gBACd,wBAAIA,UAAU,kDALS,oBAOvB,yBAAKA,UAAU,yCANS,8CAOxB,kBAAC,EAAD,QCCSkB,MATf,WACE,OACE,yBAAKlB,UAAU,yCACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEAmB,EAAcN,QACW,cAA7BO,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CJ,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiBnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIsB,IACpBC,GACA9B,OAAOC,SAAStB,MAEJoD,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMyB,GAAN,sBAEP/B,IAgEV,SAAiCM,EAAeC,GAE9C2B,MAAM5B,EAAO,CACX6B,QAAS,CAAC,iBAAkB,YAE3BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC1C/BE,K",
  "file": "static/js/main.ce9cfffd.chunk.js",
  "sourcesContent": [
    "import React from 'react';\nimport './home-link.scss';\n\nfunction HomeLink() {\n  return (\n    <a href=\"/\" className=\"home-link\">home</a>\n  );\n}\n\nexport default HomeLink;\n",
    "import React from 'react';\n\nimport './nav-menu.scss';\n\nfunction NavMenu() {\n  return (\n    <span className=\"coming-soon-label\">...Menu will be soon</span>\n  );\n}\n\nexport default NavMenu;\n",
    "import React from 'react';\n\nimport './header.scss';\nimport HomeLink from '../home-link/home-link';\nimport NavMenu from \"../nav-menu/nav-menu\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <HomeLink/>\n      <NavMenu/>\n    </header>\n  );\n}\n\nexport default Header;\n",
    "import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport './media-link-item.scss';\nimport { MediaLinkItemProps } from \"../media-links-list\";\n\n\nfunction MediaLinkItem({className, title, icon}: MediaLinkItemProps) {\n  return (\n    <div className={className}>\n      <FontAwesomeIcon icon={icon} size=\"3x\"/>\n      <span>{title}</span>\n    </div>\n  );\n}\n\nexport default MediaLinkItem;\n",
    "import React, { useState } from 'react';\n\nimport './media-links-list.scss';\nimport MediaLinkItem from \"./media-link-item/media-link-item\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { IconProp, SizeProp } from \"@fortawesome/fontawesome-svg-core\";\n\nexport interface MediaLinkItemProps {\n  title: string;\n  icon: IconProp;\n  iconSize?: SizeProp;\n  className?: string;\n}\n\nfunction MediaLinksList() {\n  const mediaLinksList: MediaLinkItemProps[] = [\n    {title: 'dpischalka@gmail.com', icon: faTwitter},\n    {title: 'dpischalka', icon: faTwitter},\n  ];\n  const [mediaItems] = useState<MediaLinkItemProps[]>(mediaLinksList);\n  const mediaLinkItems = mediaItems\n    .filter(({icon, title}: MediaLinkItemProps): boolean => Boolean(icon && title))\n    .map(({icon, title, className}: MediaLinkItemProps, index: number) => {\n      className = `media-link-item-${index}`;\n\n      return <MediaLinkItem key={index} icon={icon} title={title} className={className}/>\n    });\n\n  return (\n    <div className=\"media-links-container\">{mediaLinkItems}</div>\n  )\n}\n\nexport default MediaLinksList;\n",
    "import React from 'react';\n\nimport './content.scss';\nimport MediaLinksList from './media-links-list/media-links-list';\n\nfunction Content() {\n  const authorName: string = 'Dmitry Pischalka';\n  const description: string = 'Senior Front-End Developer, geek, blogger.';\n\n  return (\n    <main className=\"content-part\">\n      <h1 className=\"is-size-1 content-part-title has-text-centered\">{authorName}</h1>\n\n      <div className=\"content-description has-text-centered\">{description}</div>\n      <MediaLinksList/>\n    </main>\n  );\n}\n\nexport default Content;\n",
    "import React from 'react';\n\nimport './app.scss';\nimport Header from \"../header/header/header\";\nimport Content from \"../content/conten\";\n\nfunction App() {\n  return (\n    <div className=\"container is-widescreen app-component\">\n      <Header/>\n      <Content/>\n    </div>\n  );\n}\n\nexport default App;\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n",
    "import './styles/index.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"
  ],
  "sourceRoot": ""
}
