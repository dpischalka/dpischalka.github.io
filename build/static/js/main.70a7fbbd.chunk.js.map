{"version":3,"sources":["containers/content/media-links-list/media-link-item/media-link-item.tsx","containers/content/media-links-list/media-links-list.tsx","containers/content/conten.tsx","containers/app/app.tsx","serviceWorker.ts","index.tsx"],"names":["MediaLinkItem","className","title","icon","href","iconSize","Icon","size","rel","target","MediaLinksList","mediaLinksList","faEnvelope","faTwitter","faGithub","faLinkedinIn","faMedium","useState","mediaLinkItems","filter","Boolean","map","mediaLinkItemProps","index","key","Content","App","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.70a7fbbd.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport './media-link-item.scss';\nimport { MediaLinkItemProps } from \"../media-links-list\";\n\nfunction MediaLinkItem({className, title, icon, href, iconSize = '3x'}: MediaLinkItemProps) {\n  const Icon: JSX.Element = <FontAwesomeIcon className=\"contact-item-icon\" icon={icon} size={iconSize}/>;\n\n  return (\n    href\n      ? (\n        <a className={`contact-item ${className}`} rel=\"noopener noreferrer\" target=\"_blank\" href={href} title={href}>\n          <span className=\"contact-item-icon\">{Icon}</span>\n          <span className=\"contact-item-title\">{title}</span>\n        </a>\n      )\n      : (\n        <div className={`contact-item ${className}`} title={title}>\n          <span className=\"contact-item-icon\">{Icon}</span>\n          <span className=\"contact-item-title\">{title}</span>\n        </div>\n      )\n  );\n}\n\nexport default MediaLinkItem;\n","import React, { useState } from 'react';\nimport { faGithub, faLinkedinIn, faTwitter, faMedium } from \"@fortawesome/free-brands-svg-icons\";\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\nimport { IconProp, SizeProp } from \"@fortawesome/fontawesome-svg-core\";\n\nimport './media-links-list.scss';\nimport MediaLinkItem from \"./media-link-item/media-link-item\";\n\nexport interface MediaLinkItemProps {\n  title: string;\n  icon: IconProp;\n  href?: string;\n  iconSize?: SizeProp;\n  className?: string;\n}\n\nfunction MediaLinksList() {\n  const mediaLinksList: MediaLinkItemProps[] = [\n    {title: 'dpischalka@gmail.com', icon: faEnvelope, className: 'mail'},\n    {title: 'dpischalka', icon: faTwitter, href: 'https://twitter.com/dpischalka', className: 'twitter'},\n    {title: 'dpischalka', icon: faGithub, href: 'https://github.com/dpischalka', className: 'github'},\n    {title: 'dpischalka', icon: faLinkedinIn, href: 'https://www.linkedin.com/in/dpischalka/', className: 'linkedIn'},\n    {title: 'dpischalka', icon: faMedium, href: 'https://medium.com/@dpischalka/', className: 'medium'},\n  ];\n  const [mediaItems] = useState<MediaLinkItemProps[]>(mediaLinksList);\n  const mediaLinkItems = mediaItems\n    .filter(({icon, title}: MediaLinkItemProps): boolean => Boolean(icon && title))\n    .map((mediaLinkItemProps: MediaLinkItemProps, index: number): JSX.Element => {\n      mediaLinkItemProps.className = `media-link-item-${index} ${mediaLinkItemProps.className}`;\n\n      return <MediaLinkItem key={index} {...mediaLinkItemProps}/>\n    });\n\n  return (\n    <div className=\"media-links-container\">{mediaLinkItems}</div>\n  )\n}\n\nexport default MediaLinksList;\n","import React from 'react';\n\nimport './content.scss';\nimport MediaLinksList from './media-links-list/media-links-list';\n\nfunction Content() {\n  const authorName: string = 'Dmitry Pischalka';\n  const description: string = 'Senior Front-End Developer, geek, blogger.';\n  const temporaryNotification: string = 'Coming soon for blog, additional info, other...';\n\n  return (\n    <main className=\"content-part\">\n      <h1 className=\"is-size-1 content-part-title has-text-centered\">{authorName}</h1>\n\n      <div className=\"content-description has-text-centered\">{description}</div>\n      <div className=\"content-temporary-notification has-text-centered\">{temporaryNotification}</div>\n      <MediaLinksList/>\n    </main>\n  );\n}\n\nexport default Content;\n","import React from 'react';\n\nimport './app.scss';\nimport Content from \"../content/conten\";\n\nfunction App() {\n  return (\n    <div className=\"container is-widescreen app-component\">\n      <Content/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.scss';\nimport App from './containers/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}